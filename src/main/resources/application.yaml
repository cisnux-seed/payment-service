spring:
  webflux:
    static-path-pattern: ""
  web:
    resources:
      add-mappings: false
      static-locations: [ ]
      cache:
        period: 0
  application:
    name: payment
  jackson:
    property-naming-strategy: SNAKE_CASE

  main:
    web-application-type: reactive
  r2dbc:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      database: ${REDIS_DATABASE:0}
      timeout: 5000ms
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      max-block-ms: 60000
      request-timeout-ms: 30000
      delivery-timeout-ms: 120000
      enable-idempotence: true
      max-in-flight-requests-per-connection: 1
      compression-type: gzip
      properties:
        spring.json.add.type.headers: false
        spring.json.trusted.packages: "*"
server:
  port: ${SERVER_PORT:8080}
logging:
  level:
    org.springframework.r2dbc.core: ${DATABASE_LOG_LEVEL:DEBUG}
    io.r2dbc.spi: ${DATABASE_LOG_LEVEL:DEBUG}
    org.springframework.web: ${WEB_LOG_LEVEL:DEBUG}
    root: ${ROOT_LOG_LEVEL:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} | ${spring.application.name} | %logger | %M | %X{traceId} | %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} | ${spring.application.name} | %logger | %M | %X{traceId} | %msg%n"
  file:
    name: ${APP_LOG_LOCATION:payment-service-log}/${spring.application.name}.log
  logback:
    rollingpolicy:
      max-file-size: 100MB
      max-history: 10
      total-size-cap: 1GB
      file-name-pattern: ${APP_LOG_LOCATION:payment-service-log}/${spring.application.name}-%d{yyyy-MM-dd}.%i.log
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
otel:
  service:
    name: payment-service
  exporter:
    otlp:
      protocol: grpc
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT}
  instrumentation:
    logback-appender:
      enabled: true
      experimental-log-attributes: true
      experimental:
        capture-code-attributes: true
        capture-key-value-pair-attributes: true
        capture-marker-attribute: true
        capture-logger-context-attributes: true
        capture-mdc-attributes: '*'
    micrometer:
      enabled: true
  resource:
    attributes:
      deployment:
        environment: ${ENVIRONMENT:development}
      service:
        name: payment-service
        namespace: one-gate-payment
app:
  kafka:
    transaction-topic: transaction-events